#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <algorithm>
#include <iostream>
#include <vector>
#include <cassert>
using std::begin;
using std::copy;
using std::cout;
using std::end;
using std::generate;
using std::vector;

__global__ void vectorAdd(int* a, int* b, int* c, int N) {
	int tid = (blockIdx.x * blockDim.x) + threadIdx.x;
	if (tid < N) {
		c[tid] = a[tid] + b[tid];
	}
}

void verify_restlt(int *a, int *b, int *c, int N) {
	for (int i = 0; i < N; i++) {
		assert(c[i] == a[i] + b[i]);
	}
	cout << "no error\n";
}

int main() {
	cout << "hello\n";
	constexpr int N = 1 << 16;
	size_t bytes = sizeof(int) * N;

	int* h_a, * h_b, * h_c;
	cudaMallocHost(&h_a, bytes);
	cudaMallocHost(&h_b, bytes);
	cudaMallocHost(&h_c, bytes);

	for (int i = 0; i < N; i++) {
		h_a[i] = rand() % 100;
		h_b[i] = rand() % 100;
	}

	int* d_a, *d_b, *d_c;

	cudaMalloc(&d_a, bytes);
	cudaMalloc(&d_b, bytes);
	cudaMalloc(&d_c, bytes);

	cudaMemcpy(d_a, h_a, bytes, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, h_b, bytes, cudaMemcpyHostToDevice);

	int NUM_THREADS = 1 << 10;

	int NUM_BLOCKS = (N + NUM_THREADS - 1) / NUM_THREADS;

	vectorAdd << <NUM_BLOCKS, NUM_THREADS >> > (d_a, d_b, d_c, N);

	cudaMemcpy(h_c, d_c, bytes, cudaMemcpyDeviceToHost);

	verify_restlt(h_a, h_b, h_c, N);
	cudaFree(d_a);
	cudaFree(d_b);
	cudaFree(d_c);

	cout << "compile success\n";

	return 0;
}